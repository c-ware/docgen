/*
 * @docgen: project
 * @brief: an introduction into how to use docgen
 * @name: docgen-intro
 *
 * @description
 * @As described previously, docgen is a program for generating documentation
 * @through comments in the source code of a program. This is because it leads
 * @to easier to manage documentation, and keeps things organized.
 * @
 * @This serves as an introduction to writing docgen comments, and will show how
 * @to write a comment for describing a project or library-- a sort of central
 * @manual of sorts for your project that might redirect users to other parts
 * @of the documentation.
 * @
 * @So, let's begin. First off, declare a multiline comment. The first tag that
 * @docgen parses should be on the first line after the opening one. In our case,
 * @we want to generate a project manual, so we tell docgen this by putting the
 * @first tag as:
 * @
 * @\B
 * @@docgen: project
 * @\B
 * @
 * @Now that docgen knows what kind of documentation to generate, we need to start
 * @giving it some information about our project, like its name, a brief description,
 * @a long description, examples, notes, see also, etc. Let's give it a name and a broef
 * @description. Remember: each tag has to be on its own line.
 * @
 * @\B
 * @@name: my_prog
 * @@brief: this is my test program
 * @\B
 * @
 * @Let's say our program accepts some arguments to it. We want this to display
 * @in the 'SYNOPSIS' section, but how do we tell docgen to put it in there? The
 * @answer is the \Barguments\B tag.
 * @
 * @The arguments tag surrounds a block of text that should act as the program's
 * @argument string. it is always put at the top of projects. Let's say ours looks like
 * @this.
 * @
 * @\B
 * @@arguments
 * @@my_prog FOO BAR [ --help | -h ] [ --some-flag | -s ]
 * @@                [ --some-option OPT | -o OPT ]
 * @@arguments
 * @\B
 * @
 * @
 * @All block tags like arguments, and notes require that there is an 'at symbol' on each
 * @line of the block like shown above. Now, we need to describe our project. We do this with
 * @the \B@description\B tag, which @surrounds a block of text to consider it apart of the
 * @description. For example
 * @
 * @\B
 * @@description
 * @@This is part of my program description.
 * @@This is another line of my program description.
 * @@Tags can have \\Bbold text\\B, and they can also have
 * @@\\IItalic text\\I.
 * @@description
 * @\B
 * @
 * @Let's say we want to also point the users to sub-manuals that are apart of the project
 * @itself. We might want to do it with a table. Let's change the description to this to:
 * @
 * @\B
 * @@description
 * @@This is part of my program description.
 * @@This is another line of my program description.
 * @@Tags can have \\Bbold text\\B, and they can also have
 * @@\\IItalic text\\I.
 * @@
 * @@You can find sub-manuals at these locations.
 * @@\\T
 * @@\\S ;
 * @@\\H Manual;Description
 * @@\\E \\Bmanual-a\\B(1);This is the first manual
 * @@\\E \\Bmanual-b\\B(1);This is the second manual
 * @@\\E \\Bmanual-c\\B(1);This is the third manual
 * @@\\T
 * @@description
 * @\B
 * @
 * @\B\\S\B is the separator specifier for the table, which tells docgen where one cell ends
 * @and anoother begins. They must be one character. \B\\H\B is the 'header' which is the top
 * @of the table, and usually is used to describe each column in the table, and \B\\E\B is
 * @used to tell docgen what each row is. Rows can have the separator key to tell docgen to
 * @put the text after in the next column.
 * @
 * @We can do the same for notes (we do not add a table, although you can also add one in any
 * @of the sections.)
 * @\B
 * @@notes
 * @@This is where the notes for my program go. Most likely fit for technicalities about
 * @@using the program, things too small to mention in the description, etc.
 * @@notes
 * @\B
 * @
 * @And examples.
 * @\B
 * @@examples
 * @@Here is one example of how to use my program.
 * @@\\Bmy_prog argument_a argument_b --some-option foo\\B
 * @@
 * @@Here is how to get help with my program.
 * @@\\Bmy_prog --help\\B
 * @@examples
 * @\B
 * @
 * @Finally, let's tell the user where to find other related manuals with the
 * @\B@reference\B tag.
 * @
 * @\B
 * @@reference: fork(1)
 * @@reference: write(1)
 * @@reference: printf(3)
 * @\B
 * @
 * @And that is mostly it for how to generate a project. See the examples section
 * @of the main manual to see how to generate your project once you have written it,
 * @and the other types of documentation you can generate along with the tags they
 * @use.
 * @description
*/
